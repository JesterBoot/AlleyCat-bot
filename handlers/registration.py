from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from FSM.Registation_states import Registration_form
from keyboards.inline_kb import bicycle_type, gender, apply_registration, check_reg_answer, what_is_incorrect

from loader import dp

'''–°–æ–∑–¥–∞—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã –≥—Ä—É–ø–ø—É –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è'''

pravila = '''–ù–µ–ª—å–∑—è –µ—Ö–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ
–ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ
–∏ —Ç–¥\n
–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –≥–æ—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'''


@dp.callback_query_handler(text='rules')  # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
async def rules(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text(f'{pravila}', reply_markup=apply_registration)


@dp.callback_query_handler(text='start_reg')  # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
async def reg(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç {call.from_user.full_name}, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:',
                                 reply_markup=gender)
    await Registration_form.Sex.set()  # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞–∏–µ–ª—è –∏ @name –≤ –±–¥


@dp.callback_query_handler(state=Registration_form.Sex)  # –≤—ã–±–æ—Ä –ø–æ–ª–∞
# @dp.callback_query_handler(text='bicycle_type')
async def choose_sex(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=55)
    answer = call.data
    await state.update_data(sex=answer)
    await call.message.edit_text(f'–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–≤—É–µ—à—å?', reply_markup=bicycle_type)
    await Registration_form.next()  # –¥–æ–±–∞–≤—Ç—å –ø–æ–ª –≤ –±–¥


# @dp.callback_query_handler(text='bicycle_type')
# async def reg(call: CallbackQuery):
#     await call.answer(cache_time=55)
#     await call.message.edit_text(f'{call.from_user.full_name}, —É–∫–∞–∂–∏ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–π –ø–æ–ª:',
#                                  reply_markup=gender)



@dp.callback_query_handler(state=Registration_form.Bicycle_type)  # –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
async def choose_bicycle_type(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=55)
    data = await state.get_data()
    if data.get('sex') == 'male':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª'
    elif data.get('sex') == 'female':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª–∞'
    else:
        sex = '–¢—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –ø–æ–ª–æ–º (—É—á–∞—Å—Ç–≤—É–µ—à—å –≤–Ω–µ –∑–∞—á–µ—Ç–∞) –∏ –≤—ã–±—Ä–∞–ª'

    if call.data == 'fixie':
        bicycle_type = '—Ñ–∏–∫—Å—ã üö≤'
    else:
        bicycle_type = '–º—É–ª—å—Ç–∏/—Å–∏–Ω–≥–ª—Å–ø–∏–¥ üö¥'

    await call.message.edit_text(f'{sex} –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {bicycle_type}',
                                 reply_markup=check_reg_answer)
    await state.reset_state(with_data=False)  # –∑–∞–Ω–µ—Å—Ç–∏ –≤—Å–µ –≤ –±–¥


@dp.callback_query_handler(text='data_ok')  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ —Å—Ç–∞—Ä—Ç–∞
async def waiting_start(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text('–û—Ç–ª–∏—á–Ω–æ, —Å—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏ - –ò–∑–≤–∞—Ä–∏–Ω—Å–∫–∞—è —É–ª, –¥–æ–º 1.\n'
                                 '–ù–∞—á–∞–ª–æ –≥–æ–Ω–∫–∏ 1–≥–æ —Å–µ–Ω—Ç—è–±—Ä—è –≤ 12.10.\n'
                                 '–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –≤—ã–∫–ª—é—á–∞–π –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n'
                                 '–ù–µ –ø—Ä–∏–µ–∑–∂–∞–π –Ω–∞ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –∏ –ø–æ–ª—å–∑—É–π—Å—è —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–æ–º.')


@dp.callback_query_handler(text='data_not_ok')  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def pravki(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text('–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                 reply_markup=what_is_incorrect)  # –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫



