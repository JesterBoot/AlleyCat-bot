import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from time import time, ctime
import datetime

from FSM.Race_states import Race
from FSM.Registation_states import Registration_form
from keyboards.inline_kb import bicycle_type, gender, apply_registration, check_reg_answer, are_you_ready
from loader import dp, db



rule = '''
–ù–µ–ª—å–∑—è –µ—Ö–∞—Ç—å –Ω–∞ –º–∞—à–∏–Ω–µ
–ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏ —Ç–¥\n
–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è, –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ:\n
<code>–£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞, –¥–æ–º –ö–æ–ª–æ—Ç—É—à–∫–∏–Ω–∞</code>\n
–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö.\n
–î–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–ª—Ñ–∏  –∏–ª–∏ —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º –Ω–∞ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ.\n
C–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
'''


# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
@dp.callback_query_handler(text='rules')
async def rules(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text(f'{rule}', reply_markup=apply_registration)



# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@dp.callback_query_handler(text='start_reg')
async def reg(call: CallbackQuery):
    await call.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç {call.from_user.full_name}, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:',
                                 reply_markup=gender)
    await Registration_form.Sex.set()  # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞–∏–µ–ª—è –∏ @name –≤ –±–¥


# –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
@dp.callback_query_handler(state=Registration_form.Sex)
async def choose_sex(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    answer = call.data
    await state.update_data(sex=answer)
    await db.update_racer_gender(gender=answer, id=call.from_user.id)
    await call.message.edit_text(f'–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–≤—É–µ—à—å?', reply_markup=bicycle_type)
    await Registration_form.next()


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query_handler(state=Registration_form.Bicycle_type)
async def choose_bicycle_type(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    answer = call.data
    await db.update_racer_bicycle(bicycle=answer, id=call.from_user.id)#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥
    await state.update_data(bicycle_type=answer)
    data = await state.get_data()
    if data.get('sex') == 'male':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª'
    elif data.get('sex') == 'female':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª–∞'
    else:
        sex = '–¢—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –ø–æ–ª–æ–º (—É—á–∞—Å—Ç–≤—É–µ—à—å –≤–Ω–µ –∑–∞—á–µ—Ç–∞) –∏ –≤—ã–±—Ä–∞–ª'

    if call.data == 'fixie':
        bicycle = '—Ñ–∏–∫—Å—ã üö≤'
    else:
        bicycle = '–º—É–ª—å—Ç–∏/—Å–∏–Ω–≥–ª—Å–ø–∏–¥ üö¥'
    await call.message.edit_text(f'{sex} –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {bicycle}', reply_markup=check_reg_answer)
    await state.reset_state(with_data=False)
    racers = await db.select_all_racers()
    print(f'–ü–æ–ª—É—á–∏–ª –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {racers}')#–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥


# –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(text='data_not_ok')
async def pravki(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    await state.reset_data()
    await state.reset_state()
    await call.message.edit_text('–£–∫–∞–∂–∏ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–π –ø–æ–ª:', reply_markup=gender)
    await Registration_form.Sex.set()


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ —Å—Ç–∞—Ä—Ç–∞
info = '''
<code>–£—Å—Ç—å–∏–Ω—Å–∫–∏–π —Å–∫–≤–µ—Ä, –ü–∞–º—è—Ç–Ω–∏–∫ –ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∞–º –û—Ç–µ—á–µ—Å—Ç–≤–∞</code>\n
–°–±–æ—Ä 01.01.2020 –≤ 12.00, –Ω–∞—á–∞–ª–æ –≥–æ–Ω–∫–∏ –≤ 12.10.
–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, —Ç–∞–∫ —á—Ç–æ <b>–Ω–µ –≤—ã–∫–ª—é—á–∞–π</b> –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
'''
@dp.callback_query_handler(text='data_ok')
async def waiting_start(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–û—Ç–ª–∏—á–Ω–æ, –º–µ—Å—Ç–æ —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏:\n' + info)

    # while ctime() != 'Sat Aug 22 09:35:00 2020':
    #     await asyncio.sleep(1)
    # else:
    # count = await db.count_racers()
    # await call.message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞, –≤—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {count} —á–µ–ª–æ–≤–µ–∫(–∞).')

    # while ctime() != 'Sat Aug 22 12:10:00 2020':
    #     await asyncio.sleep(1)
    # else:
    await call.message.answer('–¢—ã –≥–æ—Ç–æ–≤ –∫ –≥–æ–Ω–∫–µ?', reply_markup=are_you_ready)
    await Race.First_point.set()


