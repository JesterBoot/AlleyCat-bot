import asyncio
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from FSM.Race_states import Race
from FSM.Registation_states import Registration_form
from constants.start_time import FINISH_REGISTRATION_TIME, START_RACE_TIME, POSTPONED_POST
from constants.text_messages import RULES, START_INFO, POSTPONED_TEXT
from handlers.command_info import send_postponed_post
from keyboards.inline_kb import bicycle_type, gender, apply_registration, check_reg_answer, are_you_ready
from utils.loader import dp, db


# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
@dp.callback_query_handler(text='rules')
async def rules(call: CallbackQuery):
    await call.answer(cache_time=55)
    await call.message.edit_text(f'{RULES}', reply_markup=apply_registration)


# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@dp.callback_query_handler(text='start_reg')
async def reg(call: CallbackQuery):
    await call.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç {call.from_user.full_name}, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:',
                                 reply_markup=gender)
    await Registration_form.Sex.set()


# –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
@dp.callback_query_handler(state=Registration_form.Sex)
async def choose_sex(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    answer = call.data
    await state.update_data(sex=answer)
    await db.update_racer_gender(gender=answer, id=call.from_user.id)
    await call.message.edit_text(f'–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–∞—Å—Ç–≤—É–µ—à—å?', reply_markup=bicycle_type)
    await Registration_form.next()


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query_handler(state=Registration_form.Bicycle_type)
async def choose_bicycle_type(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    answer = call.data
    await db.update_racer_bicycle(bicycle=answer, id=call.from_user.id)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥
    await state.update_data(bicycle_type=answer)
    data = await state.get_data()
    if data.get('sex') == 'male':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª'
    elif data.get('sex') == 'female':
        sex = '–¢—ã –≤—ã–±—Ä–∞–ª–∞'
    else:
        sex = '–¢—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –ø–æ–ª–æ–º (—É—á–∞—Å—Ç–≤—É–µ—à—å –≤–Ω–µ –∑–∞—á–µ—Ç–∞) –∏ –≤—ã–±—Ä–∞–ª'

    if call.data == 'fixie':
        bicycle = '—Ñ–∏–∫—Å—ã üö≤'
    else:
        bicycle = '–º—É–ª—å—Ç–∏/—Å–∏–Ω–≥–ª—Å–ø–∏–¥ üö¥'
    await call.message.edit_text(f'{sex} –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {bicycle}', reply_markup=check_reg_answer)
    await state.reset_state(with_data=False)
    racers = await db.select_all_racers()
    print(f'–£ –Ω–∞—Å –Ω–æ–≤—ã–π –≥–æ–Ω—â–∏–∫! –ê –≤–æ—Ç –≤—Å–µ —Ä–µ–π—Å–µ—Ä—ã: {racers}')  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥


# –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(text='data_not_ok')
async def correcting(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    await state.reset_data()
    await state.reset_state()
    await call.message.edit_text('–£–∫–∞–∂–∏ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–π –ø–æ–ª:', reply_markup=gender)
    await Registration_form.Sex.set()


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ —Å—Ç–∞—Ä—Ç–∞.
@dp.callback_query_handler(text='data_ok')
async def waiting_start(call: CallbackQuery):
    now = datetime.now().strftime('%d/%m/%y %H:%M:%S')
    if now < FINISH_REGISTRATION_TIME:
        await call.message.edit_text(text=START_INFO)
        if now < POSTPONED_POST:
            delta = datetime.strptime(POSTPONED_POST, '%d/%m/%y %H:%M:%S') - (
                datetime.strptime(now, '%d/%m/%y %H:%M:%S'))
            await asyncio.sleep(delta.seconds)
            await send_postponed_post(types.Message)
            now_2 = datetime.now().strftime('%d/%m/%y %H:%M:%S')
            if now_2 < FINISH_REGISTRATION_TIME:
                delta2 = datetime.strptime(FINISH_REGISTRATION_TIME, '%d/%m/%y %H:%M:%S') - (
                    datetime.strptime(now_2, '%d/%m/%y %H:%M:%S'))
                await asyncio.sleep(delta2.seconds)
                count = await db.count_racers()
                await call.message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞, –≤—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: '
                                          f' {count} —á–µ–ª–æ–≤–µ–∫(–∞).\n\n'
                                          f'–°—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.')
                now_3 = datetime.now().strftime('%d/%m/%y %H:%M:%S')
                if now_3 < START_RACE_TIME:
                    delta3 = datetime.strptime(START_RACE_TIME, '%d/%m/%y %H:%M:%S') - (
                        datetime.strptime(now_3, '%d/%m/%y %H:%M:%S'))
                    await asyncio.sleep(delta3.seconds)
                    await call.message.answer('–¢—ã –≥–æ—Ç–æ–≤ –∫ –≥–æ–Ω–∫–µ?', reply_markup=are_you_ready)

    else:
        await call.message.edit_text(
            text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–æ–Ω—Å –±—É–¥–µ—Ç <a href='vk.com/petushkislabachki'>—Ç—É—Ç</a>")
