from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from FSM.Race_states import Race
from constants.locations import points
from keyboards.inline_kb import got_the_point, cycling_admin
from keyboards.reply_kb import get_location_button, remove_keyboard
from utils.loader import dp, db


# –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–æ—á–∫–µ —Å—Ç–∞—Ä—Ç–∞
@dp.callback_query_handler(state=Race.FIRST_POINT)
async def get_location(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=3)
    await call.message.delete()
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üó∫.\n–ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É ‚¨áÔ∏è',
                              reply_markup=get_location_button)
    await state.reset_state()


# —É–ª–æ–≤–∏—Ç–µ–ª—å –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∞–º–æ–π –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(content_types=types.ContentType.LOCATION)
async def selfie_query(message: types.Message, state: FSMContext):
    on_point = '–¢—ã –Ω–∞ –º–µ—Å—Ç–µ!\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏'
    message.location["latitude"] = float(f'{message.location["latitude"]:.3f}')
    message.location["longitude"] = float(f'{message.location["longitude"]:.3f}')
    if dict(message.location) == points['–£—Å—Ç—å–∏–Ω—Å–∫–∏–π —Å–∫–≤–µ—Ä, –ü–∞–º—è—Ç–Ω–∏–∫ –ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∞–º –û—Ç–µ—á–µ—Å—Ç–≤–∞']:
        await message.answer(on_point)
        await Race.CHRIST_THE_SAVIOR.set()
    elif dict(message.location) == points['–¶–µ—Ä–∫–æ–≤—å –°–ø–∞—Å–∞ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ —Ö—Ä–∞–º–∞ –•—Ä–∏—Å—Ç–∞ –°–ø–∞—Å–∏—Ç–µ–ª—è']:
        await message.answer(on_point)
        await Race.CATHOLIC_CATHEDRAL.set()
    elif dict(message.location) == points['–†–∏–º—Å–∫–æ-–∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–π –ö–∞—Ñ–µ–¥—Ä–∞–ª—å–Ω—ã–π —Å–æ–±–æ—Ä –ù–µ–ø–æ—Ä–æ—á–Ω–æ–≥–æ ' \
                                          '–ó–∞—á–∞—Ç–∏—è –ü—Ä–µ—Å–≤—è—Ç–æ–π –î–µ–≤—ã –ú–∞—Ä–∏–∏']:
        await message.answer(on_point)
        await Race.ALLAAH.set()
    elif dict(message.location) == points['–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–æ–±–æ—Ä–Ω–∞—è –º–µ—á–µ—Ç—å']:
        await message.answer(on_point)
        await Race.SEYNAGOGUE.set()
    elif dict(message.location) == points['–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Ö–æ—Ä–∞–ª—å–Ω–∞—è —Å–∏–Ω–∞–≥–æ–≥–∞']:
        await message.answer(on_point)
        await Race.EVANGELICAL.set()
    elif dict(message.location) == points['–ï–≤–∞–Ω–≥–µ–ª–∏—á–µ—Å–∫–æ-–ª—é—Ç–µ—Ä–∞–Ω—Å–∫–∏–π –∫–∞—Ñ–µ–¥—Ä–∞–ª—å–Ω—ã–π —Å–æ–±–æ—Ä —Å–≤—è—Ç—ã—Ö –ü–µ—Ç—Ä–∞ –∏ –ü–∞–≤–ª–∞']:
        await message.answer(on_point)
        await Race.SCIENTOLOGY.set()
    elif dict(message.location) == points['–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–∞–µ–Ω—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å']:
        await message.answer(on_point)
        await Race.MOSGORBIKE.set()
    elif dict(message.location) == points['Mosgorbike']:
        await message.answer(on_point)
        await Race.FINISH.set()
    else:
        await message.answer('–¢—ã –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–æ—á–∫–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=get_location_button)
        print(message.location)
        print(await state.get_state())


# –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å–æ —Å—Ç–µ–π—Ç–∞–º–∏
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.CHRIST_THE_SAVIOR)
async def got_selfie_christ(message: types.Message, state: FSMContext):
    await state.reset_state()
    global time_start
    time_start = datetime.now().strftime("%H:%M:%S")
    await db.start_time(start_time=time_start, id=message.from_user.id)
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                         '<code>–¶–µ—Ä–∫–æ–≤—å –°–ø–∞—Å–∞ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ —Ö—Ä–∞–º–∞ –•—Ä–∏—Å—Ç–∞ –°–ø–∞—Å–∏—Ç–µ–ª—è</code>',
                         reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.CATHOLIC_CATHEDRAL)
async def got_selfie_catholic(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                         '<code>–†–∏–º—Å–∫–æ-–∫–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–π –ö–∞—Ñ–µ–¥—Ä–∞–ª—å–Ω—ã–π —Å–æ–±–æ—Ä –ù–µ–ø–æ—Ä–æ—á–Ω–æ–≥–æ –ó–∞—á–∞—Ç–∏—è –ü—Ä–µ—Å–≤—è—Ç–æ–π –î–µ–≤—ã –ú–∞—Ä–∏–∏</code>',
                         reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.ALLAAH)
async def got_selfie_allah(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω —Ü—É–∫–ª–∏–Ω–≥–∞.\n\n'
                         '–£ —Ç–µ–±—è –Ω–∞ —Å—Ç–µ–Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?',
                         reply_markup=cycling_admin)


@dp.callback_query_handler(text='ban')
@dp.callback_query_handler(text='ban_too')
async def got_banned(call: CallbackQuery):
    await call.answer(cache_time=1)
    await call.message.delete()
    await call.message.answer('–í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã –∑–∞–±–∞–Ω–µ–Ω—ã! –ï–∑–∂–∞–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                              '<code>–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–æ–±–æ—Ä–Ω–∞—è –º–µ—á–µ—Ç—å</code>',
                              reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.SEYNAGOGUE)
async def got_selfie_seynagogue(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                         '<code>–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Ö–æ—Ä–∞–ª—å–Ω–∞—è —Å–∏–Ω–∞–≥–æ–≥–∞</code>',
                         reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.EVANGELICAL)
async def got_selfie_evangelical(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                         '<code>–ï–≤–∞–Ω–≥–µ–ª–∏—á–µ—Å–∫–æ-–ª—é—Ç–µ—Ä–∞–Ω—Å–∫–∏–π –∫–∞—Ñ–µ–¥—Ä–∞–ª—å–Ω—ã–π —Å–æ–±–æ—Ä —Å–≤—è—Ç—ã—Ö –ü–µ—Ç—Ä–∞ –∏ –ü–∞–≤–ª–∞</code>',
                         reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.SCIENTOLOGY)
async def got_selfie_scientology(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n\n'
                         '<code>–ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–∞–µ–Ω—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å</code>',
                         reply_markup=got_the_point)


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.MOSGORBIKE)
async def got_selfie_mosgorbike(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ç–∫–∞, –¥—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É:\n'
                         '<code>Mosgorbike</code>',
                         reply_markup=got_the_point)


'''—Ñ–∏–Ω–∏—à–Ω–æ–µ —Ñ–æ—Ç–æ —É –º–≥–± –∏ —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–Ω–∫–∏'''
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Race.FINISH)
async def got_selfie_finish(message: types.Message, state: FSMContext):
    await state.finish()
    time_finish = datetime.now().strftime("%H:%M:%S")
    await db.finish_time(finish_time=time_finish, id=message.from_user.id)
    race_time = (datetime.strptime(time_finish, '%H:%M:%S') - datetime.strptime(time_start, '%H:%M:%S'))
    await db.total_time(total_time=str(race_time), id=message.from_user.id)
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –¥–æ–±—Ä–∞–ª—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏, –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é!',
                         reply_markup=remove_keyboard)
    await message.answer_sticker(sticker='CAACAgIAAxkBAAEBNehfOYqypKm5tQW7ighPme49OflY7gACaAADq8pZIY2MuYKiZ0KSGgQ')


# –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query_handler(text='got_the_point')
async def get_location(call: CallbackQuery):
    await call.answer(cache_time=3)
    await call.message.delete()
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üó∫\n–ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É ‚¨áÔ∏è',
                              reply_markup=get_location_button)
